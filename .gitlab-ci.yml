variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # We want full history so that "git describe" always works correctly.
  GIT_DEPTH: 0
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
  # We always want to run with the Go version installed in a Docker image.
  GOTOOLCHAIN: local

test_go:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash gcc musl-dev
    - (cd /go; go install gotest.tools/gotestsum@v1.10.1)
    - (cd /go; go install github.com/boumenot/gocover-cobertura@v1.2.0)

  script:
    - mkdir -p dist
    - touch dist/dummy
    - make test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - tests.xml
      - coverage.html
      - coverage.xml
    expire_in: never

  coverage: '/coverage: \d+\.\d+% of statements/'

test_node:
  stage: test

  image: node:20.9-alpine3.18

  script:
    - npm ci --audit=false
    - npm run test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    exclude:
      - coverage/tmp/
    expire_in: never

  coverage: '/^All files\s+\|\s+\S+\s+\|\s+\S+\s+\|\s+\S+\s+\|\s+\S+\s+\|/'

lint_go:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

  script:
    - mkdir -p dist
    - touch dist/dummy
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

lint_node:
  stage: test

  image: node:20.9-alpine3.18

  script:
    - npm ci --audit=false
    - npm run lint

lint_vue:
  stage: test

  image: node:20.9-alpine3.18

  script:
    - npm ci --audit=false
    - npm run lint-vue

lint_style:
  stage: test

  image: node:20.9-alpine3.18

  script:
    - npm ci --audit=false
    - npm run lint-style

fmt_go:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash git gcc musl-dev grep
    - go install mvdan.cc/gofumpt@v0.5.0
    - go install golang.org/x/tools/cmd/goimports@v0.13.0

  script:
    - make fmt-ci

fmt_node:
  stage: test

  image: node:20.9-alpine3.18

  before_script:
    - apk --update add git

  script:
    - npm ci --audit=false
    - npm run fmt
    - git diff --exit-code --color=always

lint_docs:
  stage: test

  image: node:20.9-alpine3.18

  before_script:
    - apk --update add make bash

  script:
    - make lint-docs

audit_go:
  stage: test

  image: golang:1.21-alpine3.18

  before_script:
    - apk --update add make bash git gcc musl-dev
    - go install github.com/sonatype-nexus-community/nancy@v1.0.42

  script:
    - mkdir -p dist
    - touch dist/dummy
    - make audit

audit_node:
  stage: test

  image: node:20.9-alpine3.18

  script:
    - npm audit

commits:
  stage: test

  image: golang:1.21-alpine3.18

  variables:
    GIT_DEPTH: "0"

  before_script:
    - apk --update add git

  script:
    - '! git log --oneline "-G^(<<<<<<<|=======|>>>>>>>)" | grep "^"'

sync_releases:
  stage: deploy

  image:
    name: registry.gitlab.com/tozd/gitlab/release/tag/v0-6-0:latest-debug
    entrypoint: [""]

  script:
    # On branch jobs, just update or remove releases, thus releases are created only on tag jobs.
    - /gitlab-release ${CI_COMMIT_BRANCH:+--no-create}

  rules:
    # Protected tags start with "v".
    - if: '$GITLAB_API_TOKEN && ($CI_COMMIT_BRANCH == "main" || ($CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/))'

  # We do not need build artifacts in this job.
  dependencies: []

sync_config:
  stage: deploy

  image:
    name: registry.gitlab.com/tozd/gitlab/config/tag/v0-5-0:latest-debug
    entrypoint: [""]

  script:
    - /gitlab-config set

  rules:
    - if: '$GITLAB_API_TOKEN && $SOPS_AGE_KEY_FILE && $CI_COMMIT_BRANCH == "main"'
      changes:
        - .gitlab-conf.yml

  # We do not need build artifacts in this job.
  dependencies: []
